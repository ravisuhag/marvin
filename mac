#!/bin/sh

# Welcome to the marvin !
# Be prepared to turn your machine into development devil

inform() {
  local fmt="$1"; shift
  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_zshrc() {
  local text="$1"
  local zshrc="$HOME/.zshrc"
  local skip_new_line="${2:-0}"

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

ssh_key_setup(){
  local pub=$HOME/.ssh/id_rsa.pub
  inform 'Checking for SSH key...'
  [[ -f $pub ]] || ssh-keygen -t rsa

  if ! [[ -f $pub ]]; then
    inform "No ssh key found. Do you want to create one?"
    select yn in "Yes" "No"; do
      case $yn in
        Yes ) ssh-keygen -t rsa;;
        No ) exit;;
      esac
    done
  fi

  inform 'Copying public key to clipboard. Paste it into your Github account...'
  [[ -f $pub ]] && cat $pub | pbcopy
  open 'https://github.com/account/ssh'
  read -p "Press enter to continue..."
}

create_zshrc() {
  if [ ! -f "$HOME/.zshrc" ]; then
    touch "$HOME/.zshrc"
  fi
}

update_shell() {
  inform "Changing shell to zsh ..."
  create_zshrc
  chsh -s "$(which zsh)"
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}

app_is_installed() {
  local app_name
  app_name=$(echo "$1" | cut -d'-' -f1)
  find /Applications -iname "$app_name*" -maxdepth 1 | egrep '.*' > /dev/null
}

echo "       o       "
echo "     _ | _     "
echo "    | ◡ ◡ |    "
echo "    |  ⏝  |   "
echo "   — ‾‾‾‾‾ —   "
echo "  |         |  "
echo "  |  |   |  |  "

inform "Marvin is at your service. Let's make your mac awesome."

# shellcheck disable=SC2154
#trap 'ret=$?; test $ret -ne 0 && printf "Failed\n\n" >&2; exit $ret' EXIT

#set -e

# Check if command line tools are installed.
xcode-select -p >/dev/null

if [[ $? != 0 ]]; then
  echo 'Command line tools are not installed...'
  echo 'Please install to continue.'
  exit
fi

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

case "$SHELL" in
  */zsh) create_zshrc ;;
  *) update_shell ;;
esac

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

# Homebrew installation
if ! command -v brew >/dev/null; then
  inform "Installing Homebrew ..."
    curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# Recommended by brew doctor'
    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"'
    export PATH="/usr/local/bin:$PATH"
else
  inform "Homebrew already installed."
fi

if brew list | grep -Fq brew-cask; then
  inform "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

inform "Updating Homebrew formulae ..."
brew update

brew bundle --file=- <<EOF

tap "homebrew/services"

# Unix
brew "git"
brew "openssl"
brew "the_silver_searcher"
brew "zsh"

# Programming languages
brew "node"
brew "go"
cask "java"

# Package managers
brew "rbenv"
brew "ruby-build"
brew "yarn"
brew "leiningen"
brew "glide"

# Tools
brew "consul"
brew "zookeeper"
brew "kafka"
brew "grpc"
brew "imagemagick"
brew "heroku-toolbelt"
cask "vagrant"
cask "chefdk"

# Databases
brew "postgres", restart_service: true
brew "redis", restart_service: true
brew "mysql"
brew "mongodb"

# Utilities
brew "youtube-dl"
brew "htop"
brew "tig"
brew "logstalgia"
brew "git-extras"
brew "fasd"

# Applications
cask "vlc"                 unless Dir.exists?('/Applications/VLC.app')
cask "transmission"        unless Dir.exists?('/Applications/transmission.app')
cask "atom"                unless Dir.exists?('/Applications/atom.app')
cask "sublime-text"        unless Dir.exists?('/Applications/Sublime Text.app')
cask "android-studio"      unless Dir.exists?('/Applications/Android Studio.app')
cask "iterm2"              unless Dir.exists?('/Applications/iTerm.app')
cask "google-chrome"       unless Dir.exists?('/Applications/Google Chrome.app')
cask "blisk"               unless Dir.exists?('/Applications/Blisk.app')
cask "firefox"             unless Dir.exists?('/Applications/Firefox.app')
cask "sip"                 unless Dir.exists?('/Applications/Sip.app')
cask "resolutionator"      unless Dir.exists?('/Applications/Resolutionator.app')
cask "flux"                unless Dir.exists?('/Applications/Flux.app')
cask "1password"           unless Dir.exists?('/Applications/1Password.app')
cask "dropbox"             unless Dir.exists?('/Applications/Dropbox.app')
cask "google-drive"        unless Dir.exists?('/Applications/Google Drive.app')
cask "github-desktop"      unless Dir.exists?('/Applications/Github Desktop.app')
cask "virtualbox"          unless Dir.exists?('/Applications/Virtual Box.app')
cask "slack"               unless Dir.exists?('/Applications/Slack.app')
cask "rescuetime"          unless Dir.exists?('/Applications/RescueTime.app')
cask "tunnelblick"         unless Dir.exists?('/Applications/Tunnelblick.app')
cask "spotify"             unless Dir.exists?('/Applications/Spotify.app')
cask "skype"               unless Dir.exists?('/Applications/Skype.app')
cask "postico"             unless Dir.exists?('/Applications/Postico.app')
cask "mysqlworkbench"      unless Dir.exists?('/Applications/MySqlWorkbench.app')
cask "dash"                unless Dir.exists?('/Applications/Dash.app')
cask "tunnelbear"          unless Dir.exists?('/Applications/TunnelBear.app')
cask "zoom"                unless Dir.exists?('/Applications/zoom.us.app')

EOF

brew cask cleanup

inform "Installed apps:"
brew cask list

inform "Configuring Ruby ..."
find_latest_ruby() {
  rbenv install -l | grep -v - | tail -1 | sed -e 's/^ *//'
}

ruby_version="$(find_latest_ruby)"
# shellcheck disable=SC2016
append_to_zshrc 'eval "$(rbenv init - --no-rehash)"' 1
eval "$(rbenv init -)"

if ! rbenv versions | grep -Fq "$ruby_version"; then
  RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/opt/openssl rbenv install -s "$ruby_version"
fi

rbenv global "$ruby_version"
# gem update --system
# gem_install_or_update 'bundler'

# Install npm packages
npm install vtop -g --silent
npm install eslint -g --silent
npm install gulp-cli -g --silent
npm install react-native-cli -g --silent
npm install artillery -g --silent
npm install fast-cli -g --silent

ssh_key_setup

inform "Setup complete!!!"
